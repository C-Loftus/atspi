//! # DBus interface proxies for: `org.a11y.atspi.Event.Object`, `org.a11y.atspi.Event.Window`, `org.a11y.atspi.Event.Mouse`, `org.a11y.atspi.Event.Keyboard`, `org.a11y.atspi.Event.Terminal`, `org.a11y.atspi.Event.Document`, `org.a11y.atspi.Event.Focus`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Event.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

pub mod document;
pub mod focus;
pub mod keyboard;
pub mod mouse;
pub mod object;
pub mod terminal;
pub mod window;

use std::{collections::HashMap, sync::Arc};

use serde::{Deserialize, Serialize};
use zbus::{
    names::{InterfaceName, MemberName, OwnedUniqueName, UniqueName},
    zvariant::{self, OwnedObjectPath, OwnedValue, Signature, Type, Value},
    Message,
};

use crate::connection::{
    ACCESSIBLE, ATSPI_EVENT, CACHE_ADD, DEVICE_EVENT, EVENT_LISTENER, QSPI_EVENT,
};
use crate::{cache::CacheItem, connection, AtspiError};

#[derive(Debug, Serialize, Deserialize)]
pub struct EventBody<'a, T> {
    #[serde(rename = "type")]
    pub kind: T,
    pub detail1: i32,
    pub detail2: i32,
    #[serde(borrow)]
    pub any_data: Value<'a>,
    #[serde(borrow)]
    pub properties: HashMap<&'a str, Value<'a>>,
}

impl<T> Type for EventBody<'_, T> {
    fn signature() -> Signature<'static> {
        <(&str, i32, i32, Value, HashMap<&str, Value>)>::signature()
    }
}

// Signature:  "siiv(so)",
#[derive(Debug, Serialize, Deserialize, Type)]
pub struct EventBodyQT {
    #[serde(rename = "type")]
    pub kind: String,
    pub detail1: i32,
    pub detail2: i32,
    pub any_data: OwnedValue,
    pub properties: (String, OwnedObjectPath),
}

// Signature (siiva{sv}),
#[derive(Clone, Debug, Serialize, Deserialize, Type)]
pub struct EventBodyOwned {
    #[serde(rename = "type")]
    pub kind: String,
    pub detail1: i32,
    pub detail2: i32,
    pub any_data: OwnedValue,
    pub properties: HashMap<String, OwnedValue>,
}

impl From<EventBodyQT> for EventBodyOwned {
    fn from(body: EventBodyQT) -> Self {
        let mut props = HashMap::new();
        props.insert(
            body.properties.0,
            Value::ObjectPath(body.properties.1.into_inner()).to_owned(),
        );
        Self {
            kind: body.kind,
            detail1: body.detail1,
            detail2: body.detail2,
            any_data: body.any_data,
            properties: props,
        }
    }
}

/// Encapsulates the different bus signal types
#[derive(Debug, Clone)]
#[non_exhaustive]
pub enum Event {
    /// Includes Atspi and Qspi events
    Atspi(AtspiEvent),
    /// Both `CacheAdd` and `CacheRemove` signals
    Cache(CacheEvent),
    //  Device(DeviceEvent),
    //  Listener(EventListener),
}

#[derive(Debug, Clone)]
pub enum CacheEvent {
    Add(CacheAddEvent),
    Remove(CacheRemoveEvent),
}

/// Type that contains the `zbus::Message` for meta information and
/// the [`crate::cache::CacheItem`]
#[derive(Debug, Clone)]
pub struct CacheAddEvent {
    pub(crate) message: Arc<Message>,
    pub(crate) body: CacheItem,
}

impl CacheAddEvent {
    /// When an object in an application is added, this may evoke a `CacheAdd` event,
    /// this yields an [`crate::cache::CacheItem`]
    #[must_use]
    pub fn item(&self) -> &CacheItem {
        &self.body
    }

    /// When an object in an application is added, this may evoke a `CacheAdd` event,
    /// this yields an [`crate::cache::CacheItem`]
    /// Consumes the `CacheAdd` event.
    #[must_use]
    pub fn into_item(self) -> CacheItem {
        self.body
    }
}

#[derive(Debug, Clone)]
pub struct CacheRemoveEvent {
    pub(crate) message: Arc<Message>,
    pub(crate) body: Accessible,
}

impl CacheRemoveEvent {
    /// What `Accessible` is removed from the application state.
    /// A reference to the `Accessible`
    #[must_use]
    pub fn as_accessible(&self) -> &Accessible {
        &self.body
    }

    /// What `Accessible` is removed from the application state.
    /// Converts the event to an Accessible
    /// Consumes the cache remove event.
    #[must_use]
    pub fn into_accessible(self) -> Accessible {
        self.body
    }

    // pub fn as_iface_reusing_connection(&self, conn: &Connection) -> AccessibleProxy {
    //     let Accessible { name, path } = self.as_accessible();
    //     crate::accessible::new(&**conn, sender, path.into())
    // }

    // pub fn as_new_proxy() -> AccessibleProxy {}
}

// TODO: Try to make borrowed versions work,
// check where the lifetimes of the borrow are tied to, see also: comment on `interface()` method
// in `DefaultEvent` impl
#[derive(Debug, Clone, Serialize, Deserialize, Type)]
pub struct Accessible {
    name: OwnedUniqueName,
    path: OwnedObjectPath,
}

#[test]
fn test_accessible_signature() {
    assert_eq!(Accessible::signature(), "(so)");
}

impl GenericEvent for CacheRemoveEvent {
    /// Bus message.
    #[must_use]
    fn message(&self) -> &Arc<Message> {
        &self.message
    }

    /// For now this returns the full interface name because the lifetimes in [`zbus_names`][zbus::names] are
    /// wrong such that the `&str` you can get from a
    /// [`zbus_names::InterfaceName`][zbus::names::InterfaceName] is tied to the lifetime of that
    /// name, not to the lifetime of the message as it should be. In future, this will return only
    /// the last component of the interface name (I.E. "Object" from
    /// "org.a11y.atspi.Event.Object").
    #[must_use]
    fn interface(&self) -> Option<InterfaceName<'_>> {
        self.message.interface()
    }

    /// Identifies this event's interface member name.
    #[must_use]
    fn member(&self) -> Option<MemberName<'_>> {
        self.message.member()
    }

    /// The object path to the object where the signal is emitted from.
    #[must_use]
    fn path(&self) -> std::option::Option<zbus::zvariant::OwnedObjectPath> {
        Some(OwnedObjectPath::from(self.message.path().unwrap()))
    }

    /// Identifies the `sender` of the event.
    /// # Errors
    /// - when deserializeing the header failed, or
    /// - When `zbus::get_field!` finds that 'sender' is an invalid field.
    fn sender(&self) -> Result<Option<zbus::names::UniqueName>, crate::AtspiError> {
        Ok(self.message.header()?.sender()?.cloned())
    }
}

impl GenericEvent for CacheAddEvent {
    /// Serialized bus message.
    #[must_use]
    fn message(&self) -> &Arc<Message> {
        &self.message
    }

    /// For now this returns the full interface name because the lifetimes in [`zbus_names`][zbus::names] are
    /// wrong such that the `&str` you can get from a
    /// [`zbus_names::InterfaceName`][zbus::names::InterfaceName] is tied to the lifetime of that
    /// name, not to the lifetime of the message as it should be. In future, this will return only
    /// the last component of the interface name (I.E. "Object" from
    /// "org.a11y.atspi.Event.Object").
    #[must_use]
    fn interface(&self) -> Option<InterfaceName<'_>> {
        self.message.interface()
    }

    /// Identifies this event's interface member name.
    #[must_use]
    fn member(&self) -> Option<MemberName<'_>> {
        self.message.member()
    }

    /// The object path to the object where the signal is emitted from.
    #[must_use]
    fn path(&self) -> std::option::Option<zbus::zvariant::OwnedObjectPath> {
        Some(OwnedObjectPath::from(self.message.path().unwrap()))
    }

    /// Identifies the `sender` of the event.
    /// # Errors
    /// - when deserializeing the header failed, or
    /// - When `zbus::get_field!` finds that 'sender' is an invalid field.
    fn sender(&self) -> Result<Option<zbus::names::UniqueName>, crate::AtspiError> {
        Ok(self.message.header()?.sender()?.cloned())
    }
}

impl TryFrom<Arc<Message>> for CacheRemoveEvent {
    type Error = AtspiError;

    fn try_from(message: Arc<Message>) -> Result<Self, Self::Error> {
        let iface = InterfaceName::from_static_str("org.a11y.atspi.Cache")?;
        if message.interface() != Some(iface) {
            return Err(AtspiError::Conversion("incorrect interface, not Cache"));
        }
        if message.member() == Some(MemberName::from_static_str("RemoveAccessible")?) {
            let body = message.body::<Accessible>()?;
            Ok(Self { message, body })
        } else {
            Err(AtspiError::Conversion("convert to CacheRemoveEvent failed"))
        }
    }
}

impl TryFrom<Arc<Message>> for CacheAddEvent {
    type Error = AtspiError;

    fn try_from(message: Arc<Message>) -> Result<Self, Self::Error> {
        let iface = InterfaceName::from_static_str("org.a11y.atspi.Cache")?;
        if message.interface() != Some(iface) {
            return Err(AtspiError::Conversion("incorrect interface, not Cache"));
        }
        if message.member() == Some(MemberName::from_static_str("AddAccessible")?) {
            let body = message.body::<CacheItem>()?;
            Ok(Self { message, body })
        } else {
            Err(AtspiError::Conversion("conversion to CacheAddEvent failed"))
        }
    }
}

#[derive(Debug, Clone)]
pub struct AtspiEvent {
    pub(crate) message: Arc<Message>,
    pub(crate) body: EventBodyOwned,
}

impl TryFrom<Arc<Message>> for AtspiEvent {
    type Error = AtspiError;

    fn try_from(message: Arc<Message>) -> Result<Self, Self::Error> {
        let body: EventBodyOwned = match message.body_signature() {
            Ok(sig) => {
                if sig == connection::QSPI_EVENT {
                    EventBodyOwned::from(message.body::<EventBodyQT>()?)
                } else {
                    message.body::<EventBodyOwned>()?
                }
            }
            Err(e) => return Err(AtspiError::from(e)),
        };
        Ok(Self { message, body })
    }
}

impl TryFrom<Arc<Message>> for Event {
    type Error = AtspiError;

    fn try_from(msg: Arc<Message>) -> Result<Event, AtspiError> {
        let sig = msg.body_signature()?;
        let sig = sig.as_bytes();
        let available = MemberName::from_static_str("Available")?;
        let cache_rem = MemberName::from_static_str("RemoveAccessible")?;

        match sig {
            _ if ACCESSIBLE.as_bytes() == sig => {
                let acc_member = msg
                    .member()
                    .ok_or(AtspiError::Owned("`Accessible` signal without member".to_string()))?;
                if acc_member == available {
                    todo!();
                }
                if acc_member == cache_rem {
                    let ev = CacheRemoveEvent::try_from(msg)?;
                    return Ok(Event::Cache(CacheEvent::Remove(ev)));
                }
                Err(AtspiError::Owned("`Accessible signal with unknown member`".to_string()))
            }
            _ if ATSPI_EVENT.as_bytes() == sig => {
                let ev = AtspiEvent::try_from(msg)?;
                Ok(Event::Atspi(ev))
            }
            _ if QSPI_EVENT.as_bytes() == sig => {
                let ev = AtspiEvent::try_from(msg)?;
                Ok(Event::Atspi(ev))
            }
            _ if EVENT_LISTENER.as_bytes() == sig => todo!(),
            _ if CACHE_ADD.as_bytes() == sig => {
                let ev = CacheAddEvent::try_from(msg)?;
                Ok(Event::Cache(CacheEvent::Add(ev)))
            }
            _ if DEVICE_EVENT.as_bytes() == sig => todo!(),
            _ => {
                let s = format!("invalid body signature: {}", msg.body_signature()?);
                Err(AtspiError::Owned(s))
            }
        }
    }
}

/// Shared behavior of bus `Signal` events.
pub trait GenericEvent {
    /// Returns the `Message` of the event type.
    fn message(&self) -> &Arc<Message>;
    /// Interface that has the signal member implemented.
    fn interface(&self) -> Option<InterfaceName<'_>>;
    /// Interface member that sent the signal.
    fn member(&self) -> Option<MemberName<'_>>;
    /// Path of the signal.
    /// # Errors
    /// TODO Describe error conditions
    fn path(&self) -> Option<zvariant::OwnedObjectPath>;
    /// Sender of the signal.
    /// # Errors
    /// TODO Describe error conditions
    fn sender(&self) -> Result<Option<UniqueName>, AtspiError>;
}

impl AtspiEvent {
    /// Deserialized signal body type.
    #[must_use]
    pub fn body(&self) -> &EventBodyOwned {
        &self.body
    }

    /// Returns the atspi event string for this event type (E.G. "Object:StateChanged:Focused").
    ///
    /// This should not be used for matching on events as it needlessly allocates and copies the 3
    /// components of the event type. It is meant for logging, etc.
    #[must_use]
    pub fn event_string(&self) -> String {
        let interface = self.message.interface().expect("Event should have an interface");
        let interface = interface.rsplit('.').next().expect("Interface should contain a '.'");
        let member = self.message.member().expect("Event should have a member");
        let kind = self.kind();
        format!("{interface}:{member}:{kind}")
    }

    #[must_use]
    pub fn kind(&self) -> &str {
        &self.body.kind
    }

    /// Event dependant detail.
    #[must_use]
    pub fn detail1(&self) -> i32 {
        self.body.detail1
    }

    /// Event dependant detail.
    #[must_use]
    pub fn detail2(&self) -> i32 {
        self.body.detail2
    }

    /// Event dependant generic `Value`.
    #[must_use]
    pub fn any_data(&self) -> &zvariant::OwnedValue {
        &self.body.any_data
    }

    #[must_use]
    pub fn properties(&self) -> &HashMap<String, zvariant::OwnedValue> {
        &self.body.properties
    }
}
