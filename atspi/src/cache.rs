//! # DBus interface proxy for: `org.a11y.atspi.Cache`
//!
//! This code was generated by `zbus-xmlgen` `2.0.1` from DBus introspection data.
//! Source: `Cache.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!

use crate::StateSet;
use crate::InterfaceSet;
use zbus::dbus_proxy;

/// A structure which represents a cache item from AT-SPI.
/// It proceedes in this order:
///
/// ```rust
/// // the accessible being referred to
/// (String, [`zbus::zvariant::OwnedObjectPath`]),
/// // the application which the accessible is contained within.
/// (String, [`zbus::zvariant::OwnedObjectPath`]),
/// // the parent object reference
/// (String, [`zbus::zvariant::OwnedObjectPath`]),
/// // accessible index in parent
/// i32,
/// // child count of accessible
/// i32,
/// // list of interfaces
/// InterfaceSet
/// // localized short names
/// String,
/// // role
/// u32,
/// // more detailed localized name
/// String,
/// // states
/// StateSet
/// ```
type CacheStruct = (
    (String, zbus::zvariant::OwnedObjectPath), // a11y object reference
    (String, zbus::zvariant::OwnedObjectPath), // application reference
    (String, zbus::zvariant::OwnedObjectPath), // parent object reference
    i32,                                       // index in parent
    i32,                                       // child count of object
    InterfaceSet,                              // list of interfaces
    String,                                    // localized short names
    u32,                                       // role
    String,                                    // more dtailed localized name
    StateSet,
); // states

#[dbus_proxy(interface = "org.a11y.atspi.Cache")]
trait Cache {
    /// GetItems method
    fn get_items(&self) -> zbus::Result<Vec<CacheStruct>>;

    /// AddAccessible signal
    #[dbus_proxy(signal)]
    fn add_accessible(&self, node_added: CacheStruct) -> zbus::Result<()>;

    /// RemoveAccessible signal
    #[dbus_proxy(signal)]
    fn remove_accessible(&self, node_removed: CacheStruct) -> zbus::Result<()>;
}
