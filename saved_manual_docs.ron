[
    (None, Module((
        doc: [
            "//! ## Signified signal types",
            "//!",
            "//! The generic `AtspiEvent` has a specific meaning depending on its origin.",
            "//! This module offers the signified types and their conversions from a generic `AtpiEvent`.",
            "//!",
            "//! The `TrySignify` macro implements a `TryFrom<Event>` on a per-name and member basis",
            "//!",
        ],
    ))),
    (Some("pub trait Signified {"), Item((
        dist: 0,
        doc: [
            "/// All Atspi / Qspi event types encapsulate `AtspiEvent`.",
            "/// This trait allows access to the underlying item.",
        ],
    ))),
    (Some("impl<T> GenericEvent for T"), Item((
        dist: 0,
        doc: [
            "/// Shared functionality of Events, through its `Message` header",
        ],
    ))),
    (Some("fn message(&self) -> &Arc<Message> {"), Item((
        dist: 1,
        doc: [
            "    /// Serialized bus message.",
        ],
    ))),
    (Some("fn interface(&self) -> Option<InterfaceName<\'_>> {"), Comment((
        dist: 2,
        doc: [
            "    // For now this returns the full interface name because the lifetimes in [`zbus_names`][zbus::names] are",
            "    // wrong such that the `&str` you can get from a",
            "    // [`zbus_names::InterfaceName`][zbus::names::InterfaceName] is tied to the lifetime of that",
            "    // name, not to the lifetime of the message as it should be. In future, this will return only",
            "    // the last component of the interface name (I.E. \"Object\" from",
            "    // \"org.a11y.atspi.Event.Object\").",
            "    /// The emitting interface.",
        ],
    ))),
    (Some("fn member(&self) -> Option<MemberName<\'_>> {"), Item((
        dist: 1,
        doc: [
            "    /// The interface member that dispatched this event / signal.",
            "    ///",
            "    /// Members of the interface are either signals, methods or properties.",
            "    /// eg. `PropertyChanged` or `TextChanged`",
        ],
    ))),
    (Some("fn path(&self) -> std::option::Option<zbus::zvariant::ObjectPath<\'_>> {"), Item((
        dist: 1,
        doc: [
            "    /// The object path to the object where the signal is emitted from.",
        ],
    ))),
    (Some("fn sender(&self) -> Result<Option<zbus::names::UniqueName>, crate::AtspiError> {"), Item((
        dist: 0,
        doc: [
            "    /// Identifies the `sender` of the `Event`.",
            "    /// # Errors",
            "    /// - when deserializeing the header failed, or",
            "    /// * When `zbus::get_field!` finds that \'sender\' is an invalid field.",
        ],
    ))),
    (Some("pub enum DocumentEvents {"), Item((
        dist: 1,
        doc: [
            "/// Any of the `Document` events.",
            "///",
            "/// If you are interested in `Event.Document` events, this enum",
            "/// may help you select for these:",
            "///",
            "/// # Example",
            "/// ```",
            "/// // Boilerplate omitted.",
            "/// use crate::identify::DocumentEvent;",
            "///",
            "/// while let Ok(Some(ev)) = event_stream.next().await? {",
            "///     let doc_ev: DocumentEvent = ev.try_into()?;",
            "/// }",
            "///  ```",
            "/// The event details encoded in the de-generalized types.",
            "///",
            "///",
            "///",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Document|LoadComplete|    |    |    |    |properties|",
            "/// |Document|Reload|    |    |    |    |properties|",
            "/// |Document|LoadStopped|    |    |    |    |properties|",
            "/// |Document|ContentChanged|    |    |    |    |properties|",
            "/// |Document|AttributesChanged|    |    |    |    |properties|",
            "/// |Document|PageChanged|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub enum ObjectEvents {"), Item((
        dist: 1,
        doc: [
            "/// Any of the `Object` events.",
            "///",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Object|PropertyChange|property|    |    |value|properties|",
            "/// |Object|BoundsChanged|    |    |    |    |properties|",
            "/// |Object|LinkSelected|    |    |    |    |properties|",
            "/// |Object|StateChanged|state|enabled|    |    |properties|",
            "/// |`Object|ChildrenChanged|operation|index_in_parent`|    |child|properties|",
            "/// |Object|VisibleDataChanged|    |    |    |    |properties|",
            "/// |Object|SelectionChanged|    |    |    |    |properties|",
            "/// |Object|ModelChanged|    |    |    |    |properties|",
            "/// |Object|ActiveDescendantChanged|    |    |    |child|properties|",
            "/// |Object|Announcement|text|    |    |    |properties|",
            "/// |Object|AttributesChanged|    |    |    |    |properties|",
            "/// |Object|RowInserted|    |    |    |    |properties|",
            "/// |Object|RowReordered|    |    |    |    |properties|",
            "/// |Object|RowDeleted|    |    |    |    |properties|",
            "/// |Object|ColumnInserted|    |    |    |    |properties|",
            "/// |Object|ColumnReordered|    |    |    |    |properties|",
            "/// |Object|ColumnDeleted|    |    |    |    |properties|",
            "/// |Object|TextBoundsChanged|    |    |    |    |properties|",
            "/// |Object|TextSelectionChanged|    |    |    |    |properties|",
            "/// |`Object|TextChanged|detail|start_pos|end_pos|text|properties`|",
            "/// |Object|TextAttributesChanged|    |    |    |    |properties|",
            "/// |Object|TextCaretMoved|    |position|    |    |properties|",
        ],
    ))),
    (Some("pub enum WindowEvents {"), Item((
        dist: 1,
        doc: [
            "/// Any of the `Window` events.",
            "///",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Window|PropertyChange|property|    |    |    |properties|",
            "/// |Window|Minimize|    |    |    |    |properties|",
            "/// |Window|Maximize|    |    |    |    |properties|",
            "/// |Window|Restore|    |    |    |    |properties|",
            "/// |Window|Close|    |    |    |    |properties|",
            "/// |Window|Create|    |    |    |    |properties|",
            "/// |Window|Reparent|    |    |    |    |properties|",
            "/// |Window|DesktopCreate|    |    |    |    |properties|",
            "/// |Window|DesktopDestroy|    |    |    |    |properties|",
            "/// |Window|Destroy|    |    |    |    |properties|",
            "/// |Window|Activate|    |    |    |    |properties|",
            "/// |Window|Deactivate|    |    |    |    |properties|",
            "/// |Window|Raise|    |    |    |    |properties|",
            "/// |Window|Lower|    |    |    |    |properties|",
            "/// |Window|Move|    |    |    |    |properties|",
            "/// |Window|Resize|    |    |    |    |properties|",
            "/// |Window|Shade|    |    |    |    |properties|",
            "/// |Window|uUshade|    |    |    |    |properties|",
            "/// |Window|Restyle|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub enum MouseEvents {"), Item((
        dist: 1,
        doc: [
            "/// Any of the `Mouse` events.",
            "///",
            "/// Those interested in `Event.Mouse` events, this enum",
            "/// may help select and specify for those on a stream:",
            "///",
            "/// # Example",
            "/// ```",
            "/// // Boilerplate omitted.",
            "/// use crate::identify::MouseEvent;",
            "///",
            "/// while let Ok(Some(ev)) = event_stream.next().await? {",
            "///   let mse_ev: MouseEvent = ev.try_into()?;",
            "/// }",
            "///  ```",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Mouse|Abs|    |x|y|    |properties|",
            "/// |Mouse|Rel|    |x|y|    |properties|",
            "/// |`Mouse|Button|detail|mouse_x|mouse_y`|    |properties|",
        ],
    ))),
    (Some("pub enum TerminalEvents {"), Item((
        dist: 1,
        doc: [
            "/// Any of the `Terminal` events.",
            "///",
            "/// If you are interested in `Event.Terminal` events, this enum",
            "/// may, for instance, help you select for those on a stream:",
            "///",
            "/// # Example",
            "/// ```",
            "/// // Boilerplate omitted.",
            "/// use crate::identify::TerminalEvent;",
            "///",
            "/// while let Ok(Some(ev)) = event_stream.next().await? {",
            "///   let term_ev: TerminalEvent = ev.try_into()?;",
            "/// }",
            "///  ```",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Terminal|LineChanged|    |    |    |    |properties|",
            "/// |Terminal|ColumncountChanged|    |    |    |    |properties|",
            "/// |Terminal|LinecountChanged|    |    |    |    |properties|",
            "/// |Terminal|ApplicationChanged|    |    |    |    |properties|",
            "/// |Terminal|CharwidthChanged|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub enum FocusEvents {"), Item((
        dist: 1,
        doc: [
            "/// The `Focus` event.",
            "/// ## Deprecation notice!!",
            "/// since: AT-SPI 2.9.4",
            "/// This signal is deprecated and may be removed in the near future.",
            "/// Monitor `StateChanged::Focused` signals instead.",
            "///",
            "/// Event table for the contained types:",
            "///",
            "/// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Focus|Focus|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub enum KeyboardEvents {"), Item((
        dist: 1,
        doc: [
            "/// The `Keyboard` events.",
            "///",
            "/// Contains the variant of the `Keyboard` event.",
            "/// While this enum has only one item, it is defined nevertheless",
            "/// to keep conversion requirements congruent over all types.",
            "///",
            "/// If you are interested in `Event.Keyboard` events, this enum",
            "/// may, for instance, help you select for those on a stream:",
            "///",
            "/// # Example",
            "/// ```",
            "/// // Boilerplate omitted.",
            "/// use crate::identify::KeyboardEvent;",
            "///",
            "/// while let Ok(Some(ev)) = event_stream.next().await? {",
            "///   let kb_ev: KeyboardEvent = ev.try_into()?;",
            "/// }",
            "///  ```",
            "/// Event table for the contained types:",
            "///",
            "/// Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties",
            "/// |:--|---|---|---|---|---|---|",
            "/// |Keyboard|Modifiers|    |`previous_modifiers`|`current_modifiers`|    |properties|",
        ],
    ))),
    (Some("pub mod object {"), Comment((
        dist: 1,
        doc: [
            "// ---------------> Object types:",
        ],
    ))),
    (Some("pub fn enabled(&self) -> bool {"), Comment((
        dist: 1,
        doc: [
            "        //TODO checkme please!!",
        ],
    ))),
    (Some("pub struct ActiveDescendantChangedEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 1,
        doc: [
            "    // TODO Check my impl please.",
        ],
    ))),
    (Some("pub fn text(&self) -> &OwnedValue {"), Comment((
        dist: 1,
        doc: [
            "        // TODO zvariant::Value -> String me please",
        ],
    ))),
    (Some("pub struct PropertyChangeEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// ------<- end of Obj signals",
            "// ----------> Start of Win",
        ],
    ))),
    (Some("pub struct AbsEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// ----------<- end of Win signals",
            "// ----------> Start of Mse",
        ],
    ))),
    (Some("pub fn x(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "    /// X-coordinate of mouse button event",
            "    ///  Coordinates are absolute, with the origin in the top-left of the \'root window\'",
        ],
    ))),
    (Some("pub fn y(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "    /// Y-coordinate of mouse button event",
            "    /// Coordinates are absolute, with the origin in the top-left of the \'root window\'",
        ],
    ))),
    (Some("pub fn button(&self) -> &str {"), Item((
        dist: 1,
        doc: [
            "    /// Button being used 1..X",
            "    /// The suffix may either be \'p\', for pressed, or \'r\' for rekeased.",
        ],
    ))),
    (Some("pub fn x(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "    /// X-coordinate of mouse button event",
        ],
    ))),
    (Some("pub fn y(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "    /// Y-coordinate of mouse button event",
        ],
    ))),
    (Some("pub struct ModifiersEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// ----------<- end of Mse signals",
            "// ----------> Start of Kbd",
        ],
    ))),
    (Some("pub struct LineChangedEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// ----------<- end of Kbd signals",
            "// ----------> Start of Term",
        ],
    ))),
    (Some("pub struct LoadCompleteEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// -------<- end of Term signals",
            "// ----------> Start of Doc",
        ],
    ))),
    (Some("pub struct FocusEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "// ---------- End of Doc",
            "// ----------> Start of Focus",
            "// #[deprecated(note = \"Users are advised to monitor Object:StateChanged:focused instead.\")]",
        ],
    ))),
]