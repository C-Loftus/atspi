[
    (None, Module((
        doc: [
            "//! ## Signified signal types",
            "//!",
            "//! The generic `AtspiEvent` has a specific meaning depending on its origin.",
            "//! This module offers the signified types and their conversions from a generic `AtpiEvent`.",
            "//!",
            "//! The `TrySignify` macro implements a `TryFrom<Event>` on a per-name and member basis",
            "//!",
        ],
    ))),
    (Some("pub mod object {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum ObjectEvents {"), Item((
        dist: 1,
        doc: [
            "    /// Any of the `Object` events.",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Object|PropertyChange|property|    |    |value|properties|",
            "    /// |Object|BoundsChanged|    |    |    |    |properties|",
            "    /// |Object|LinkSelected|    |    |    |    |properties|",
            "    /// |Object|StateChanged|state|enabled|    |    |properties|",
            "    /// |`Object|ChildrenChanged|operation|index_in_parent`|    |child|properties|",
            "    /// |Object|VisibleDataChanged|    |    |    |    |properties|",
            "    /// |Object|SelectionChanged|    |    |    |    |properties|",
            "    /// |Object|ModelChanged|    |    |    |    |properties|",
            "    /// |Object|ActiveDescendantChanged|    |    |    |child|properties|",
            "    /// |Object|Announcement|text|    |    |    |properties|",
            "    /// |Object|AttributesChanged|    |    |    |    |properties|",
            "    /// |Object|RowInserted|    |    |    |    |properties|",
            "    /// |Object|RowReordered|    |    |    |    |properties|",
            "    /// |Object|RowDeleted|    |    |    |    |properties|",
            "    /// |Object|ColumnInserted|    |    |    |    |properties|",
            "    /// |Object|ColumnReordered|    |    |    |    |properties|",
            "    /// |Object|ColumnDeleted|    |    |    |    |properties|",
            "    /// |Object|TextBoundsChanged|    |    |    |    |properties|",
            "    /// |Object|TextSelectionChanged|    |    |    |    |properties|",
            "    /// |`Object|TextChanged|detail|start_pos|end_pos|text|properties`|",
            "    /// |Object|TextAttributesChanged|    |    |    |    |properties|",
            "    /// |Object|TextCaretMoved|    |position|    |    |properties|",
        ],
    ))),
    (Some("pub struct PropertyChangeEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // ------<- end of Obj signals",
            "    // ----------> Start of Win",
        ],
    ))),
    (Some("pub struct ActiveDescendantChangedEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 1,
        doc: [
            "    // TODO Check my impl please.",
        ],
    ))),
    (Some("pub mod window {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum WindowEvents {"), Item((
        dist: 1,
        doc: [
            "    /// Any of the `Window` events.",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Window|PropertyChange|property|    |    |    |properties|",
            "    /// |Window|Minimize|    |    |    |    |properties|",
            "    /// |Window|Maximize|    |    |    |    |properties|",
            "    /// |Window|Restore|    |    |    |    |properties|",
            "    /// |Window|Close|    |    |    |    |properties|",
            "    /// |Window|Create|    |    |    |    |properties|",
            "    /// |Window|Reparent|    |    |    |    |properties|",
            "    /// |Window|DesktopCreate|    |    |    |    |properties|",
            "    /// |Window|DesktopDestroy|    |    |    |    |properties|",
            "    /// |Window|Destroy|    |    |    |    |properties|",
            "    /// |Window|Activate|    |    |    |    |properties|",
            "    /// |Window|Deactivate|    |    |    |    |properties|",
            "    /// |Window|Raise|    |    |    |    |properties|",
            "    /// |Window|Lower|    |    |    |    |properties|",
            "    /// |Window|Move|    |    |    |    |properties|",
            "    /// |Window|Resize|    |    |    |    |properties|",
            "    /// |Window|Shade|    |    |    |    |properties|",
            "    /// |Window|uUshade|    |    |    |    |properties|",
            "    /// |Window|Restyle|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub mod mouse {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum MouseEvents {"), Item((
        dist: 1,
        doc: [
            "    /// Any of the `Mouse` events.",
            "    ///",
            "    /// Those interested in `Event.Mouse` events, this enum",
            "    /// may help select and specify for those on a stream:",
            "    ///",
            "    /// # Example",
            "    ///",
            "    /// Even though this example employs `Tokio`, any runtime will do.",
            "    ///",
            "    /// Note that this example is minimized for rhe sake of brevity.",
            "    /// More complete examples may be found in the `examples/` directory.",
            "    ///",
            "    /// ```",
            "    /// use atspi::{events::EventInterfaces, Event};",
            "    /// # use std::time::Duration;",
            "    /// use tokio_stream::StreamExt;",
            "    ///",
            "    /// #[tokio::main]",
            "    /// async fn main() {",
            "    ///     let atspi = atspi::Connection::open().await.unwrap();",
            "    ///     let events = atspi.event_stream();",
            "    /// # let events = tokio_stream::StreamExt::timeout(events, Duration::from_secs(1));",
            "    ///     tokio::pin!(events);",
            "    ///",
            "    ///     while let Some(Ok(ev)) = events.next().await {",
            "    /// #       let Ok(ev) = ev else { break };",
            "    ///          let Event::Interfaces(EventInterfaces::Mouse(_event)) = ev else { continue };",
            "    ///     }",
            "    /// }",
            "    /// ```",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Mouse|Abs|    |x|y|    |properties|",
            "    /// |Mouse|Rel|    |x|y|    |properties|",
            "    /// |`Mouse|Button|detail|mouse_x|mouse_y`|    |properties|",
        ],
    ))),
    (Some("pub struct AbsEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // ----------<- end of Win signals",
            "    // ----------> Start of Mse",
        ],
    ))),
    (Some("pub fn x(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "        /// X-coordinate of mouse button event",
            "        ///  Coordinates are absolute, with the origin in the top-left of the \'root window\'",
        ],
    ))),
    (Some("pub fn y(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "        /// Y-coordinate of mouse button event",
            "        /// Coordinates are absolute, with the origin in the top-left of the \'root window\'",
        ],
    ))),
    (Some("pub fn x(&self) -> i32 {"), Item((
        dist: 1,
        doc: [
            "        /// Y-coordinate of mouse button event",
            "        /// Coordinates are relative to the focused window\'s top left corner coordinates.",
        ],
    ))),
    (Some("pub fn y(&self) -> i32 {"), Item((
        dist: 0,
        doc: [
            "        /// Y-coordinate of mouse button event",
            "        /// Coordinates are relative to the focused window\'s top left corner coordinates.",
        ],
    ))),
    (Some("pub mod keyboard {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum KeyboardEvents {"), Item((
        dist: 1,
        doc: [
            "    /// The `Keyboard` events.",
            "    ///",
            "    /// Contains the variant of the `Keyboard` event.",
            "    /// While this enum has only one item, it is defined nevertheless",
            "    /// to keep conversion requirements congruent over all types.",
            "    ///",
            "    /// If you are interested in `Event.Keyboard` events, this enum",
            "    /// may, for instance, help you select for those on a stream:",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Keyboard|Modifiers|    |`previous_modifiers`|`current_modifiers`|    |properties|",
        ],
    ))),
    (Some("pub struct ModifiersEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // ----------<- end of Mse signals",
            "    // ----------> Start of Kbd",
        ],
    ))),
    (Some("pub mod terminal {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum TerminalEvents {"), Item((
        dist: 1,
        doc: [
            "    /// Any of the `Terminal` events.",
            "    ///",
            "    /// If you are interested in `Event.Terminal` events, this enum",
            "    /// may, for instance, help you select for those on a stream:",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Terminal|LineChanged|    |    |    |    |properties|",
            "    /// |Terminal|ColumncountChanged|    |    |    |    |properties|",
            "    /// |Terminal|LinecountChanged|    |    |    |    |properties|",
            "    /// |Terminal|ApplicationChanged|    |    |    |    |properties|",
            "    /// |Terminal|CharwidthChanged|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub struct LineChangedEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // ----------<- end of Kbd signals",
            "    // ----------> Start of Term",
        ],
    ))),
    (Some("pub mod document {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum DocumentEvents {"), Item((
        dist: 1,
        doc: [
            "    /// Any of the `Document` events.",
            "    ///",
            "    /// If you are interested in `Event.Document` events, this enum",
            "    /// may help you select for these:",
            "    ///",
            "    /// The event details encoded in the de-generalized types.",
            "    ///",
            "    ///",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Document|LoadComplete|    |    |    |    |properties|",
            "    /// |Document|Reload|    |    |    |    |properties|",
            "    /// |Document|LoadStopped|    |    |    |    |properties|",
            "    /// |Document|ContentChanged|    |    |    |    |properties|",
            "    /// |Document|AttributesChanged|    |    |    |    |properties|",
            "    /// |Document|PageChanged|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub struct LoadCompleteEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // -------<- end of Term signals",
            "    // ----------> Start of Doc",
        ],
    ))),
    (Some("pub mod focus {"), Comment((
        dist: 0,
        doc: [
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
            "// this is to stop clippy from complaining about the copying of module names in the types; since this is more organizational than logical, we\'re ok leaving it in",
        ],
    ))),
    (Some("pub enum FocusEvents {"), Item((
        dist: 1,
        doc: [
            "    /// The `Focus` event.",
            "    /// ## Deprecation notice!!",
            "    /// since: AT-SPI 2.9.4",
            "    /// This signal is deprecated and may be removed in the near future.",
            "    /// Monitor `StateChanged::Focused` signals instead.",
            "    ///",
            "    /// Event table for the contained types:",
            "    ///",
            "    /// |Interface|Member|Kind|Detail 1|Detail 2|Any Data|Properties|",
            "    /// |:--|---|---|---|---|---|---|",
            "    /// |Focus|Focus|    |    |    |    |properties|",
        ],
    ))),
    (Some("pub struct FocusEvent(pub(crate) AtspiEvent);"), Comment((
        dist: 2,
        doc: [
            "    // ---------- End of Doc",
            "    // ----------> Start of Focus",
            "    // #[deprecated(note = \"Users are advised to monitor Object:StateChanged:focused instead.\")]",
        ],
    ))),
]